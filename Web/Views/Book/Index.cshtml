@model IEnumerable<ViewModels.Book>

@{
    ViewBag.Title = "Books";
}

<h2>Books</h2>

<p>
    <button id="btnShowModal" type="button">
        Create New
    </button>
</p>
@{
    Html.RenderPartial("_Create");
}
<table class="table" id="booksList">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Id)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Authors)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ReleaseDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Rate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PageNumber)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Id)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @foreach (var author in item.Authors)
                {
                    @Html.ActionLink(
                        linkText: $"{author.FirstName} {author.LastName}",
                        actionName: "Edit",
                        controllerName: "Author",
                        routeValues: new
                             {
                            id = author.Id,
                            firstName = author.FirstName,
                            lastName = author.LastName
                        },
                        htmlAttributes: null
                    )
                    <br />
                }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReleaseDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Rate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PageNumber)
            </td>
            <td>
                <a class="edit-book" href="#">Edit</a><br />
                <a class="delete-book" href="#">Delete</a>
            </td>
        </tr>
    }

</table>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script type="text/javascript">
    $(document).ready(function () {
        $("#btnShowModal").click(function () {
            $("#bookModal").modal('show');
        });

        $("#btnHideModal").click(function () {
            $('#createBookForm').trigger("reset");
            $('#AuthorIds').val("").trigger('change');

            $("#bookModal").modal('hide');
        });

        $("#booksList").on("click", ".edit-book", function () {
            var bookId = +$(this).parent().parent().children(':first')[0].innerText;
            $.ajax({
                type: "GET",
                url: "@Url.Action("Get")",
                data: { id: bookId },
                success: function (data) {
                    $("#bookModal").modal('show');
                    $("#createBookForm #Id").val(bookId);
                    $("#createBookForm #Name").val(data.Name);
                    $("#createBookForm #ReleaseDate").val(formatDate(dateFromJsonNumber(data.ReleaseDate)));
                    $("#createBookForm #AuthorIds").val(data.AuthorIds).trigger("change");
                    $("#createBookForm #Rate").val(data.Rate);
                    $("#createBookForm #PageNumber").val(data.PageNumber);
                }
            });
        });

        $("#booksList").on("click", ".delete-book", function () {
            var bookId = +$(this).parent().parent().children(':first')[0].innerText;
            var row = $(this).parent().parent()[0];
            $.ajax({
                type: "POST",
                url: "@Url.Action("Delete")",
                data: { id: bookId },
                success: function () {
                    row.remove();
                },
                error: function (data) {
                    $('#AuthorIds').validate();
                }
            });
        });

        //helper
        function dateFromJsonNumber(value) {
            var date = new Date(parseInt(value.replace("/Date(", "").replace(")/", ""), 10));
            return date;
        }

        function formatDate(date) {
            let dd = date.getDate();
            let mm = date.getMonth() + 1;
            const yyyy = date.getFullYear();
            if (dd < 10) {
                dd = `0${dd}`;
            }
            if (mm < 10) {
                mm = `0${mm}`;
            }
            return `${yyyy}-${mm}-${dd}`;
        }
    });
</script>
